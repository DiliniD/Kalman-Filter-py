import numpy as np
import matplotlib.pyplot as plt
import time

def define_filter(t):
    #Define state transition matrix
    F = np.array([[1, 0, 0, t, 0, 0],
        [0, 1, 0, 0, t, 0],
        [0, 0, 1, 0, 0, t],
        [0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0],
        [0, 0, 0, 0, 0, 1]])

    Q = 0

    #Define state obseration matrix (observant model)
    H = np.array([
        [1, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0]
    ])

    # Define measurement uncertainty/covariance (might have to updated in each step based on sensor characteristics)
    # Covariance of error taken as 1cm here
    R = np.array([
        [0.0001, 0, 0],
        [0, 0.0001, 0],
        [0, 0, 0.0001]
    ])

    return F, Q, H, R

def predict_next_state(x, F, Q, p):
    x_next = np.dot(F, x)
    P_next = np.dot(np.dot(F, p), np.transpose(F))
    return x_next, P_next

def initialize_filter(t):
    F, Q, H, R = define_filter(t)
    # x = np.array([[0], [0], [0], [0], [0], [0]]) #set initial state (either assumed or taken from another system)
    x = np.array([[9.79004], [-19.7447], [2.08763], [0], [0], [0]])
        
    #since we assume the initial state, set estimate uncertainty to a higher value
    p = 10000 * np.eye(6)
    x_next, p_next = predict_next_state(x, F, Q, p)
    return x_next, p_next

def estimate_current_state(F, H, R, z, x_predicted, p_predicted): 
    #estimate kalman gain K
    HT = np.transpose(H)
    temp1 = np.dot(p_predicted, HT)
    temp2 = np.linalg.inv(np.dot(np.dot(H, p_predicted), HT) + R)
    K = np.dot(temp1, temp2)
    
    #estimate system current state
    x = x_predicted + np.dot(K, (z - np.dot(H, x_predicted)))

    #estimate estimate's uncerainty
    temp3 = np.eye(6) - np.dot(K, H)
    p = np.dot(np.dot(temp3, p_predicted), np.transpose(temp3)) + np.dot(np.dot(K,R),np.transpose(K))

    return K,x,p

def kalman_filter(z, t, x_predicted, p_predicted):
    F, Q, H, R = define_filter(t)
    K, x, p = estimate_current_state(F, H, R, z, x_predicted, p_predicted)
    x_next, p_next = predict_next_state(x, F, Q, p)
    return K, x, p, x_next, p_next

if __name__ == '__main__':
    #sample measurements
    sample_measurements = [
        [9.77635 ,-19.7478 ,2.08525],
        [9.79155 ,-19.7255 ,2.08876],
        [9.75992 ,-19.7513 ,2.10385],
        [9.78411 ,-19.7471 ,2.10144],
        [9.89333 ,-19.7752 ,2.06022],
        [9.75454 ,-19.6588 ,2.08845],
        [9.70565 ,-19.5491 ,2.08711],
        [9.60724 ,-19.5153 ,2.0784],
        [9.42503 ,-19.2931 ,2.04632],
        [9.36825 ,-19.1218 ,2.28311],
        [9.22221 ,-19.1831 ,2.36582],
        [9.01714 ,-18.9795 ,2.47702],
        [8.99097 ,-18.7896 ,2.45736],
        [8.79939 ,-18.5823 ,2.42351],
        [8.67182 ,-18.4957 ,2.54195],
        [8.49044 ,-18.4352 ,2.65982],
        [8.42439 ,-18.1897 ,2.82293],
        [8.21268 ,-18.0712 ,2.78703],
        [8.14913 ,-17.9288 ,2.784],
        [7.94772 ,-17.805 ,2.94615],
        [7.91517 ,-17.6732 ,3.02688],
        [7.79488 ,-17.7204 ,3.02705],
        [7.6081 ,-17.4867 ,3.1089],
        [7.43699 ,-17.2391 ,3.15187],
        [7.38188 ,-17.2009 ,3.28281],
        [7.2162 ,-17.0284 ,3.25201],
        [7.11168 ,-17.0607 ,3.31653],
        [6.90106 ,-16.7603 ,3.45973],
        [6.7972 ,-16.5967 ,3.5474],
        [6.71381 ,-16.5157 ,3.51453],
        [6.58721 ,-16.5224 ,3.52811],
        [6.48379 ,-16.2141 ,3.75446],
        [6.32087 ,-16.0935 ,3.82853],
        [6.13583 ,-15.9858 ,3.78016],
        [6.07618 ,-15.9843 ,3.81525],
        [5.91278 ,-15.6758 ,4.00772],
        [5.74548 ,-15.5828 ,4.06592],
        [5.67863 ,-15.4968 ,4.07125],
        [5.52843 ,-15.4741 ,4.03141],
        [5.47399 ,-15.3852 ,4.23552],
        [5.34286 ,-15.0955 ,4.30611],
        [5.17555 ,-14.9623 ,4.3188],
        [5.0906 ,-14.9128 ,4.31092],
        [4.83838 ,-14.7228 ,4.51881],
        [4.79336 ,-14.6498 ,4.50778],
        [4.68537 ,-14.4533 ,4.52701],
        [4.58151 ,-14.4687 ,4.62665],
        [4.3909 ,-14.1466 ,4.69198],
        [4.25864 ,-14.0134 ,4.72068],
        [4.17074 ,-14.054 ,4.77755],
        [4.0744 ,-13.8056 ,4.90163],
        [3.93959 ,-13.6618 ,4.97717],
        [3.83771 ,-13.661 ,4.98349],
        [3.69155 ,-13.5731 ,5.05804],
        [3.47696 ,-13.3368 ,5.17368],
        [3.41898 ,-13.295 ,5.17186],
        [3.29582 ,-13.2134 ,5.24068],
        [3.12449 ,-12.8939 ,5.31102],
        [3.0368 ,-12.9025 ,5.35767],
        [2.85627 ,-12.6929 ,5.51806],
        [2.73166 ,-12.5498 ,5.5147],
        [2.61944 ,-12.5265 ,5.50634],
        [2.45237 ,-12.2162 ,5.68596],
        [2.37172 ,-12.2277 ,5.66323],
        [2.2696 ,-12.1444 ,5.72765],
        [2.05711 ,-11.9174 ,5.86175],
        [2.00307 ,-11.8502 ,5.81856],
        [1.86726 ,-11.803 ,5.92917],
        [1.70482 ,-11.5816 ,5.96714],
        [1.62325 ,-11.5077 ,6.00675],
        [1.49541 ,-11.2767 ,6.15773],
        [1.33922 ,-11.2316 ,6.16109],
        [1.2692 ,-11.1687 ,6.29617],
        [1.10269 ,-10.9299 ,6.24557],
        [0.99058 ,-10.8667 ,6.3768],
        [0.850728 ,-10.6478 ,6.41187],
        [0.739943 ,-10.605 ,6.53062],
        [0.621577 ,-10.3787 ,6.57217],
        [0.466509 ,-10.3324 ,6.65606],
        [0.357221 ,-10.2442 ,6.73362],
        [0.223719 ,-10.0562 ,6.7252],
        [0.0986964 ,-9.96111 ,6.85807],
        [-0.044467 ,-9.80659 ,6.90355],
        [-0.174949 ,-9.73635 ,6.98893],
        [-0.275569 ,-9.52222 ,6.97801],
        [-0.411589 ,-9.45815 ,7.0935],
        [-0.522158 ,-9.25734 ,7.12635],
        [-0.657825 ,-9.22756 ,7.22684],
        [-0.774289 ,-9.06727 ,7.25917],
        [-0.922213 ,-8.94204 ,7.35697],
        [-1.05562 ,-8.83743 ,7.40855],
        [-1.19023 ,-8.67261 ,7.45527],
        [-1.31314 ,-8.55251 ,7.52406],
        [-1.4248 ,-8.39714 ,7.56802],
        [-1.57326 ,-8.3392 ,7.65522],
        [-1.64892 ,-8.15795 ,7.72615],
        [-1.76478 ,-8.09578 ,7.79826],
        [-1.90122 ,-7.87435 ,7.83898],
        [-2.06638 ,-7.83373 ,7.93504],
        [-2.18803 ,-7.69848 ,7.976],
        [-2.28804 ,-7.53181 ,7.99155],
        [-2.40795 ,-7.45322 ,8.09017],
        [-2.53447 ,-7.26981 ,8.16192],
        [-2.68492 ,-7.17586 ,8.20049],
        [-2.80627 ,-7.03541 ,8.33442],
        [-2.94256 ,-6.90046 ,8.33193],
        [-3.07416 ,-6.8036 ,8.42614],
        [-3.15312 ,-6.62554 ,8.44389],
        [-3.30841 ,-6.55856 ,8.54929],
        [-3.43237 ,-6.40202 ,8.61842],
        [-3.53722 ,-6.2426 ,8.62088],
        [-3.6983 ,-6.1478 ,8.75219],
        [-3.85612 ,-5.99909 ,8.8599],
        [-3.95334 ,-5.81074 ,8.85226],
        [-4.10294 ,-5.72931 ,8.91607],
        [-4.21727 ,-5.61127 ,9.01935],
        [-4.32658 ,-5.51951 ,9.09575],
        [-4.45837 ,-5.36871 ,9.12009],
        [-4.57101 ,-5.21942 ,9.16122],
        [-4.70472 ,-5.12378 ,9.21434],
        [-4.80825 ,-5.02546 ,9.33549],
        [-4.96552 ,-4.89451 ,9.43783],
        [-5.09027 ,-4.76447 ,9.4715],
        [-5.2092 ,-4.69556 ,9.59086],
        [-5.29748 ,-4.50854 ,9.55389],
        [-5.43185 ,-4.38219 ,9.63021],
        [-5.51567 ,-4.27131 ,9.64318],
        [-5.6567 ,-4.15481 ,9.70133],
        [-5.77994 ,-4.06179 ,9.78168],
        [-5.91357 ,-3.9245 ,9.83379],
        [-6.04732 ,-3.80918 ,9.90345],
        [-6.15208 ,-3.70794 ,9.96527],
        [-6.28782 ,-3.56714 ,10.0425],
        [-6.42015 ,-3.43257 ,10.0991],
        [-6.5644 ,-3.28225 ,10.1717],
        [-6.68181 ,-3.1534 ,10.2236],
        [-6.82395 ,-3.02864 ,10.297],
        [-6.92428 ,-2.89932 ,10.3593],
        [-7.03744 ,-2.77207 ,10.4022],
        [-7.21538 ,-2.68178 ,10.5423],
        [-7.31817 ,-2.51683 ,10.5607],
        [-7.44733 ,-2.39887 ,10.6433],
        [-7.54573 ,-2.26278 ,10.7024],
        [-7.65549 ,-2.14739 ,10.7525],
        [-7.85686 ,-2.01773 ,10.8292],
        [-7.95012 ,-1.91549 ,10.8884],
        [-8.10089 ,-1.75586 ,10.9719],
        [-8.18963 ,-1.65656 ,10.9914],
        [-8.35511 ,-1.54725 ,11.1109],
        [-8.44519 ,-1.41597 ,11.1437],
        [-8.57597 ,-1.255 ,11.2318],
        [-8.67233 ,-1.13088 ,11.3318],
        [-8.77503 ,-0.987914 ,11.3117],
        [-9.00481 ,-0.87644 ,11.4339],
        [-9.1129 ,-0.747873 ,11.4849],
        [-9.25118 ,-0.633478 ,11.5566],
        [-9.34656 ,-0.504973 ,11.6045],
        [-9.43362 ,-0.392661 ,11.6544],
        [-9.53959 ,-0.298108 ,11.7105],
        [-9.64172 ,-0.16547 ,11.7228],
        [-9.84219 ,-0.0270753 ,11.8531],
        [-9.96304 ,0.0576139 ,11.9041],
        [-10.0784 ,0.169254 ,12.0081],
        [-10.1797 ,0.319929 ,12.0324],
        [-10.2884 ,0.449521 ,12.0445],
        [-10.3936 ,0.596277 ,12.1271],
        [-10.5139 ,0.698395 ,12.1292],
        [-10.7198 ,0.840568 ,12.3065],
        [-10.871 ,1.03504 ,12.4126],
        [-11.0262 ,1.15191 ,12.3858],
        [-11.1416 ,1.31345 ,12.4802]]
    
    delta_t = 0.12 #time interval, the measurements taken

    x_predicted, p_predicted = initialize_filter(delta_t)

    velocity_estimates = np.array([[0,0,0]])
    # velocity_estimates = np.array([[1,2,4],[0,0,0]])
    

    for i in range(0, len(sample_measurements)-1):
        print(i)
        measurement = np.array([[sample_measurements[i][0]], [sample_measurements[i][1]], [sample_measurements[i][2]]])
        K, x_current, p_current, x_predicted, p_predicted = kalman_filter(measurement, delta_t, x_predicted, p_predicted)      

        velocity_estimates = np.append(velocity_estimates, [[x_current[3][0], x_current[4][0], x_current[5][0]]], axis = 0)
        # print(sample_measurements[i][0], sample_measurements[i][1], sample_measurements[i][2], x_current[0][0], x_current[1][0], x_current[2][0], x_current[3][0], x_current[4][0], x_current[5][0])
        
    velocity_estimates = np.delete(velocity_estimates, 0, axis = 0)
    plt.plot(velocity_estimates[:,0])
    plt.plot(velocity_estimates[:,1])
    plt.plot(velocity_estimates[:,2])
    plt.show()